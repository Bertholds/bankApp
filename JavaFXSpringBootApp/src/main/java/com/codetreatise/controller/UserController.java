package com.codetreatise.controller;

import java.net.URL;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.function.Predicate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Controller;

import com.codetreatise.bean.Adherent;
import com.codetreatise.bean.Utilisateur;
import com.codetreatise.config.StageManager;
import com.codetreatise.repository.AdherentRepository;
import com.codetreatise.repository.UtilisateurRepository;
import com.codetreatise.service.MethodUtilitaire;
import com.codetreatise.service.impl.UtilisateurServiceImplement;
import com.codetreatise.view.FxmlView;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;
import javafx.util.Callback;

@Controller
public class UserController implements Initializable {
	@FXML
	private ComboBox<String> memberId;
	@FXML
	private TextField pseudo;
	@FXML
	private TableView<Utilisateur> utilisateurTable;
	@FXML
	private TableColumn<Utilisateur, String> IdTableColumn;
	@FXML
	private TableColumn<Utilisateur, String> pseudoTableColumn;
	@FXML
	private TableColumn<Utilisateur, Boolean> editTableColumn;
	@FXML
	private TextField search;
	@FXML
	private Button btnDel;
	@FXML
	private Button btnCreate;
	@FXML
	private Button btnCancel;

	@Autowired
	private UtilisateurRepository utilisateurRepository;

	@Autowired
	private AdherentRepository adherentRepository;

	@Autowired
	private UtilisateurServiceImplement utilisateurServiceImplement;

	@Autowired
	private MethodUtilitaire methodUtilitaire;

	@Lazy
	@Autowired
	private StageManager stageManager;

	ObservableList<Utilisateur> utilisateursList = FXCollections.observableArrayList();

	ObservableList<String> adherentsList = FXCollections.observableArrayList();

	// Event Listener on Button.onAction
	@FXML
	private void handleBtnCancelClick() {
		clearFields();
		enableBtn();
	}

	private void disableBtn() {
		btnCreate.setDisable(true);
		btnDel.setDisable(true);
		memberId.setDisable(true);
		btnCancel.setVisible(true);
	}

	private void enableBtn() {
		btnCancel.setVisible(false);
		btnCreate.setDisable(false);
		btnDel.setDisable(false);
		memberId.setDisable(false);
	}

	@FXML
	public void handleCreateClick(ActionEvent event) throws Exception {
		// TODO Autogenerated
		if (MethodUtilitaire.emptyValidation("Adhérent", getAdherentNom() == null)
				&& MethodUtilitaire.emptyValidation("Pseudo", getPseudo().isEmpty())) {

			// le pseudo d'un utilisateur doit etre unique
			Utilisateur existingUser = utilisateurRepository.findByPseudo(getPseudo());
			if (existingUser == null) {
				Utilisateur utilisateur = new Utilisateur();
				utilisateur.setUserId(getId());
				utilisateur.setAdherent(getAdherent());
				utilisateur.setPseudo(getPseudo());

				Utilisateur newUtilisateur = utilisateurRepository.save(utilisateur);
				MethodUtilitaire.saveAlert(newUtilisateur, "Save User sucessful",
						"User " + newUtilisateur.getAdherent().getNom() + " " + newUtilisateur.getAdherent().getPrenom()
								+ " created successful with pseudo " + newUtilisateur.getPseudo());

				clearFields();
				LoadDataOnTable();
				methodUtilitaire.LogFile("Creation de compte utilisateur", newUtilisateur.getPseudo(),
						MethodUtilitaire.deserializationUser(), new Date(System.currentTimeMillis()));
			} else
				MethodUtilitaire.deleteNoPersonSelectedAlert("Redondance du pseudo",
						"Attention un utilisateur porte déja ce pseudo", "Veuillez utiliser un autre pseudo");
		}
	}

	// Event Listener on Button.onAction
	@FXML
	public void handleDeleteClick(ActionEvent event) throws Exception {
		// TODO Autogenerated
		List<Utilisateur> users = utilisateurTable.getSelectionModel().getSelectedItems();
		if (!users.isEmpty()) {
			if (MethodUtilitaire.confirmationDialog(event, "Suppression d'utilisateur",
					"Confirmer la suppression d'utilisateur(s) sélectionné(s)",
					"Etes vous sur vouloir le(s) supprimé(s) ?", "Oui", "Annuler")) {
				try {
					utilisateurRepository.deleteInBatch(users);
					LoadDataOnTable();
					MethodUtilitaire.saveAlert(event, "Delete operation successful", "Delete operation successful");
					for (Utilisateur utilisateur : users) {
						methodUtilitaire.LogFile("Suppression d'utilisateur", utilisateur.getPseudo(),
								MethodUtilitaire.deserializationUser(), new Date(System.currentTimeMillis()));
					}
				} catch (Exception e) {
					e.printStackTrace();
					MethodUtilitaire.deleteNoPersonSelectedAlert("Violation d'intégrité", "Violation d'intégrité",
							"Veuillez au préalable supprimer le compte d'utilisateur appartenant à cet utilisateur");
				}
			}
		} else {
			MethodUtilitaire.deleteNoPersonSelectedAlert("Error no user selected", "Error no user selected",
					"Please select one or many user and try.");
		}
	}

	// Event Listener on Button.onAction
	@FXML
	public void handleEditClick(ActionEvent event) {
		// TODO Autogenerated
		try {
			Utilisateur utilisateur = utilisateurRepository.findOne(getId());
			if (MethodUtilitaire.emptyValidation("Pseudo", getPseudo().isEmpty())) {

				utilisateur.setAdherent(getAdherent());
				utilisateur.setPseudo(getPseudo());

				Utilisateur updateUtilisateur = utilisateurServiceImplement.update(utilisateur);
				MethodUtilitaire.saveAlert(updateUtilisateur, "Update User sucessful",
						"User " + updateUtilisateur.getAdherent().getNom() + " "
								+ updateUtilisateur.getAdherent().getPrenom() + " updated successful with pseudo "
								+ updateUtilisateur.getPseudo());

				clearFields();
				LoadDataOnTable();
				enableBtn();
				methodUtilitaire.LogFile("Edition d'utilisateur", updateUtilisateur.getPseudo(),
						MethodUtilitaire.deserializationUser(), new Date(System.currentTimeMillis()));
			}
		} catch (Exception e) {
			e.printStackTrace();
			MethodUtilitaire.deleteNoPersonSelectedAlert("Attention aucune sélection", "Attention aucune sélection",
					"Cliqué sur le bouton éditer correspondant a l'utilisateur dans le tableau et éssayer de nouveau");
		}
	}

	// Event Listener on Button.onAction
	@FXML
	public void handleUserAccountClick(ActionEvent event) {
		Node node = (Node) event.getSource();
		Stage stage = (Stage) node.getScene().getWindow();
		stage.close();
		stageManager.switchSceneShowPreviousStage(FxmlView.USERACCOUNT);
	}

	// Event Listener on TextField[#search].onKeyReleased
	@FXML
	public void handleSearchReleased(KeyEvent event) {
		filteredTable(event);
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		btnCancel.setVisible(false);
		setTableColumnProperties();
		LoadDataOnTable();
		utilisateurTable.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
		adherentsList.clear();
		setComboboxMemebre();
		// FilterValueOnComboboxMemberId();
	}

	private void setComboboxMemebre() {
		List<Adherent> adherents = adherentRepository.findBySituation("Actif");
		for (Adherent adherent : adherents) {
			System.out.println(adherent.getType().equals("Membre"));
			
			if (!adherent.getType().equals("Membre")) {
				System.out.println("Type; " + adherent.getType());
				adherentsList.add(
						adherent.getIdentifiant().toString() + " " + adherent.getNom() + " " + adherent.getPrenom());
			}
		}
		memberId.setItems(adherentsList);

	}

	/*
	 * 
	 * private void FilterValueOnComboboxMemberId() {
	 * 
	 * // Create a FilteredList wrapping the ObservableList.
	 * FilteredList<String>filteredItems = new FilteredList<String>(adherentsList, p
	 * -> true);
	 * 
	 * // Add a listener to the textProperty of the combobox editor. The // listener
	 * will simply filter the list every time the input is changed // as long as the
	 * user hasn't selected an item in the list.
	 * memberId.getEditor().textProperty().addListener((obs, oldValue, newValue) ->
	 * { final TextField editor = memberId.getEditor(); final String selected =
	 * memberId.getSelectionModel().getSelectedItem();
	 * 
	 * // This needs run on the GUI thread to avoid the error described here: //
	 * https://bugs.openjdk.java.net/browse/JDK-8081700.
	 * 
	 * Platform.runLater(() -> { // If the no item in the list is selected or the
	 * selected item // isn't equal to the current input, we refilter the list. if
	 * (selected == null || !selected.equals(editor.getText())) {
	 * filteredItems.setPredicate(item -> { // We return true for any items that
	 * starts with the same letters as the input. // We use // toUpperCase to avoid
	 * case sensitivity. if (item.toUpperCase().startsWith(newValue.toUpperCase()))
	 * { return true; } else { return false; } });
	 * 
	 * } }); });
	 * 
	 * memberId.setItems(filteredItems); }
	 * 
	 */

	private void clearFields() {
		memberId.getSelectionModel().clearSelection();
		memberId.getEditor().clear();
		pseudo.clear();
	}

	private void LoadDataOnTable() {
		// TODO Auto-generated method stub
		utilisateursList.clear();
		utilisateursList.addAll(utilisateurRepository.findAll());
		utilisateurTable.setItems(utilisateursList);
	}

	private String getAdherentNom() {
		return memberId.getSelectionModel().getSelectedItem();
	}

	private Adherent getAdherent() {
		Long id = Long.parseLong(memberId.getSelectionModel().getSelectedItem().substring(0, 1));
		System.out.println("iddddddddddddddddddd" + id);
		return adherentRepository.findOne(id);
	}

	private Long getId() {
		System.out.println(
				"idddddddddddddddddddddddddddd" + memberId.getSelectionModel().getSelectedItem().substring(0, 1));
		return Long.valueOf(memberId.getSelectionModel().getSelectedItem().substring(0, 1));
	}

	private String getPseudo() {
		return pseudo.getText();
	}

	private void setTableColumnProperties() {

		pseudoTableColumn.setCellValueFactory(new PropertyValueFactory<>("pseudo"));

		IdTableColumn.setCellValueFactory(
				new Callback<TableColumn.CellDataFeatures<Utilisateur, String>, ObservableValue<String>>() {

					@Override
					public ObservableValue<String> call(CellDataFeatures<Utilisateur, String> param) {
						// TODO Auto-generated method stub
						return new SimpleStringProperty(param.getValue().getAdherent().getIdentifiant().toString());
					}
				});
		editTableColumn.setCellFactory(cellFactory);
	}

	private void filteredTable(KeyEvent event) {
		FilteredList<Utilisateur> filteredutilisateurs = new FilteredList<Utilisateur>(utilisateursList, e -> true);
		search.setOnKeyReleased(e -> {
			search.textProperty().addListener((observableValue, oldValue, newValue) -> {
				filteredutilisateurs.setPredicate((Predicate<? super Utilisateur>) utilisateur -> {
					if (newValue == null || newValue.isEmpty()) {
						return true;
					}
					String newValueFilter = newValue.toLowerCase();
					if (utilisateur.getPseudo().contains(newValueFilter)) {
						return true;
					} else if (utilisateur.getAdherent().getIdentifiant().toString().toLowerCase()
							.contains(newValueFilter)) {
						return true;
					}
					return false;
				});
			});
		});

		SortedList<Utilisateur> sortedList = new SortedList<Utilisateur>(filteredutilisateurs);
		sortedList.comparatorProperty().bind(utilisateurTable.comparatorProperty());
		utilisateurTable.setItems(sortedList);
	}

	Callback<TableColumn<Utilisateur, Boolean>, TableCell<Utilisateur, Boolean>> cellFactory = new Callback<TableColumn<Utilisateur, Boolean>, TableCell<Utilisateur, Boolean>>() {
		@Override
		public TableCell<Utilisateur, Boolean> call(final TableColumn<Utilisateur, Boolean> param) {
			final TableCell<Utilisateur, Boolean> cell = new TableCell<Utilisateur, Boolean>() {
				Image imgEdit = new Image(getClass().getResourceAsStream("/images/edit.png"));
				final Button btnEdit = new Button();

				@Override
				public void updateItem(Boolean check, boolean empty) {
					super.updateItem(check, empty);
					if (empty) {
						setGraphic(null);
						setText(null);
					} else {
						btnEdit.setOnAction(e -> {
							Utilisateur utilisateur = getTableView().getItems().get(getIndex());
							updateUser(utilisateur);
						});

						btnEdit.setStyle("-fx-background-color: transparent;");
						ImageView iv = new ImageView();
						iv.setImage(imgEdit);
						iv.setPreserveRatio(true);
						iv.setSmooth(true);
						iv.setCache(true);
						btnEdit.setGraphic(iv);

						setGraphic(btnEdit);
						setAlignment(Pos.CENTER_LEFT);
						setText(null);
					}
				}

				private void updateUser(Utilisateur utilisateur) {
					disableBtn();
					memberId.getSelectionModel().select(utilisateur.getAdherent().getIdentifiant().toString() + " "
							+ utilisateur.getAdherent().getNom() + " " + utilisateur.getAdherent().getPrenom());
					pseudo.setText(utilisateur.getPseudo());
				}
			};
			return cell;
		}
	};

}

package com.codetreatise.controller;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import com.codetreatise.bean.Menu;
import com.codetreatise.repository.MenuRepository;
import com.codetreatise.service.MethodUtilitaire;
import com.codetreatise.service.impl.MenuServiceImplement;
import com.codetreatise.view.FxmlView;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.ListView;
import javafx.scene.control.MenuButton;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.Label;

import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;

@Controller
public class SettingController implements Initializable{
	@FXML
	private ListView<String> listMenus;
	@FXML
	private ListView<String> listManager;
	@FXML
	private ListView<String> listAdministrateur;
	@FXML
	private ListView<String> listRoot;
	@FXML
	private Pane stylePane;
	@FXML
	private Label previousStyle;
	@FXML
	private Button btnBlueStyle;
	@FXML
	private Button btnDarkStyle;
	@FXML
	private Button btnWhiteStyle;
	@FXML
	private TextField associationName;
	
	@Autowired
	private HomeController homeController; 
	
	@Autowired
    private MenuRepository menuRepository;
	
	@Autowired
	private MenuServiceImplement menuServiceImplement;
	
	List<ListView<String>> listViews = new LinkedList<ListView<String>>();
	
	// Event Listener on Button.onAction
	@FXML
	public void handleSaveClick(ActionEvent event) {
		for (ListView<String> listView : getAllList()) {
			if(listView.getItems().size() !=0) {
				for(int i=0; i<listView.getItems().size(); i++) {
					String menu = listView.getItems().get(i);
					Menu existedMenu = menuRepository.findByNomAndDroitAccess(menu, listView.getId());
					if(existedMenu == null) {
						Menu newMenu = new Menu();
						//les id des listViews on ete seté daans la fonction setIdOfList
						newMenu.setDroitAcces(listView.getId());
						newMenu.setNom(menu);
						menuRepository.save(newMenu);
					}else {
						existedMenu.setDroitAcces(listView.getId());
						menuServiceImplement.update(existedMenu);
					}
				}
			}
		}
		MethodUtilitaire.saveAlert(event, "Setting successful", "Le parametrage des droit d'accès à été mis a jour avec succès !");
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleManagerAdd(ActionEvent event) {
		addMenu(listMenus, listManager);
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleManagerRemove(ActionEvent event) {
		removeMenu(listManager);
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleRootAdd(ActionEvent event) {
		addMenu(listMenus, listRoot);
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleRootRemove(ActionEvent event) {
		removeMenu(listRoot);
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleAdministrateurAdd(ActionEvent event) {
		addMenu(listMenus, listAdministrateur);
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleAdministrateurRemove(ActionEvent event) {
		removeMenu(listAdministrateur);
	}
	// Event Listener on Button[#btnBlueStyle].onAction
	@FXML
	public void handleBleuStyleClick(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnBlueStyle].onMouseEntered
	@FXML
	public void mouseBlueStyleEntered(MouseEvent event) {
		stylePane.setBackground(new Background(new BackgroundFill(Color.DODGERBLUE, CornerRadii.EMPTY, Insets.EMPTY)));
		previousStyle.setTextFill(Color.WHITE);
	}
	// Event Listener on Button[#btnBlueStyle].onMouseExited
	@FXML
	public void mouseBlueStyleExited(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnDarkStyle].onAction
	@FXML
	public void handleDarkStyleClick(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnDarkStyle].onMouseEntered
	@FXML
	public void mouseDarkStyleEntered(MouseEvent event) {
		stylePane.setBackground(
				new Background(new BackgroundFill(Color.web("#808080"), CornerRadii.EMPTY, Insets.EMPTY)));
		previousStyle.setTextFill(Color.WHITE);
	}
	// Event Listener on Button[#btnDarkStyle].onMouseExited
	@FXML
	public void mouseDarkStyleExited(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnWhiteStyle].onAction
	@FXML
	public void handleWhiteStyleClick(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnWhiteStyle].onMouseEntered
	@FXML
	public void mouseWhiteStyleEntered(MouseEvent event) {
		stylePane.setBackground(
				new Background(new BackgroundFill(Color.web("#ddd6c6"), CornerRadii.EMPTY, Insets.EMPTY)));
		previousStyle.setTextFill(Color.BLACK);
	}
	// Event Listener on Button[#btnWhiteStyle].onMouseExited
	@FXML
	public void mouseWhiteStyleExited(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleValidateClick(ActionEvent event) throws IOException {
		
		URL location = SettingController.class.getProtectionDomain().getCodeSource().getLocation();
		String path = System.getProperty("user.dir");
		File file = new File(path+File.separator+"writeLabel.txt");
		FileWriter fileWriter = new FileWriter(file);
		fileWriter.write(associationName.getText());
		fileWriter.close();
		 homeController.initialize(location,  ResourceBundle.getBundle("Bundle"));
		MethodUtilitaire.saveAlert(null, "Mise a jour du label reussie",
				"Le label de l'association mis a jour avec success !");
	}
	
	private void addMenu(ListView<String> source, ListView<String> destination) {
		ObservableList<String> menus = source.getSelectionModel().getSelectedItems();
		if (!menus.isEmpty()) {
			destination.getItems().addAll(menus);
		} else
			MethodUtilitaire.deleteNoPersonSelectedAlert("No menu selected", "No menu selected",
					"Please select a menu firstly");
	}

	private void removeMenu(ListView<String> source) {
		ObservableList<String> menus = source.getSelectionModel().getSelectedItems();
		if (!menus.isEmpty()) {
			source.getItems().removeAll(menus);
		} else
			MethodUtilitaire.deleteNoPersonSelectedAlert("No menu selected", "No menu selected",
					"Please select a menu firstly");
	}
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		
		setMultipleSelectionOnListView();
		
		setIdOfList();
		
		//load all menu button on the listView menu (Menu disponible)
		List<MenuButton> menuButtons = homeController.getAllMenuButton();
		for (MenuButton b : menuButtons) {
			listMenus.getItems().add(b.getText());
		}
		
		//load all button on the listView menu (Menu disponible)
		List<Button> buttons = homeController.getAllButton(); 
		for (Button b : buttons) {
			listMenus.getItems().add(b.getText());
		}

		try {
			loadMenu();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void setMultipleSelectionOnListView() {
		listAdministrateur.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
		listMenus.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
		listManager.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
		listRoot.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
	}
	
	private void setIdOfList() {
		listAdministrateur.setId("Administrateur");
		listManager.setId("Manager");
		listRoot.setId("Root");
	}
	
	private List<ListView<String>> getAllList() {
		listViews.add(listRoot);
		listViews.add(listManager);
		listViews.add(listAdministrateur);
		return listViews;
	}
	
	//chargement des menus dans la listView des menus correspondant
	private void loadMenu() throws Exception {
       for (ListView<String> listView : getAllList()) {
		  String droitAcces = listView.getId();
		  List<Menu> menuDeLaListView = menuRepository.findByDroitAcces(droitAcces);
		  for (Menu menu : menuDeLaListView) {
			listView.getItems().add(menu.getNom());
		}
	}	

	}
	
}
